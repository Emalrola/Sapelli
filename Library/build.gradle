/**
 * Sapelli data collection platform: http://sapelli.org
 *
 * Copyright 2012-2016 University College London - ExCiteS group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'maven'

configurations {
    // For copying source code from dependencies:
    xerces
    validator
}

def artifactId = 'sapelli-library'

dependencies {
    // Local libs:
    //compile fileTree(dir: 'libs', include: ['*.jar'])

    // Joda:
    compile 'joda-time:joda-time:2.9.6'

    // Apache:
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.github.ExCiteS:apache-commons-codec-shaded:1.10' // See https://github.com/ExCiteS/apache-commons-codec-shaded
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.apache.commons:commons-compress:1.12'
    xerces 'xerces:xercesImpl:2.11.0:sources@jar'
    validator 'commons-validator:commons-validator:1.5.1:sources@jar'

    // Non-Apache compression libs:
    compile 'org.tukaani:xz:1.6'

    // Google:
    compile 'com.googlecode.libphonenumber:libphonenumber:7.7.5'
}

def thirdPartySrcFolder = new File(project.buildDir, 'third-party-src')

task extractXercesClasses(type: Copy) {
    from zipTree(configurations.xerces.singleFile)
    into thirdPartySrcFolder
    include (
            'org/apache/xerces/util/XMLChar.java',
            'org/apache/xerces/util/XML11Char.java')
}

task extractValidatorClasses(type: Copy) {
    from zipTree(configurations.validator.singleFile)
    into thirdPartySrcFolder
    include (
            'org/apache/commons/validator/routines/DomainValidator.java',
            'org/apache/commons/validator/routines/EmailValidator.java',
            'org/apache/commons/validator/routines/InetAddressValidator.java',
            'org/apache/commons/validator/routines/RegexValidator.java',
            'org/apache/commons/validator/routines/UrlValidator.java')
}

sourceSets {
    main {
        java {
            // in addition to the default source folder (src/main/java/) we add this one:
            srcDir thirdPartySrcFolder
        }
    }
}

compileJava {
    dependsOn extractXercesClasses, extractValidatorClasses
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

javadoc {
    options.encoding = 'UTF-8'
}

task generateCMMBPCProperties(dependsOn: processResources) << {
    //def os = new ByteArrayOutputStream()
    javaexec {
        main = 'uk.ac.ucl.excites.sapelli.shared.io.text.GenerateCMMBPCProperties'
        classpath = sourceSets.main.runtimeClasspath
        args new File(projectDir, 'charsetinfo').absolutePath, sourceSets.main.output.resourcesDir.absolutePath
        //standardOutput = os
    }
    //def buildString = os.toString()
}

processResources.finalizedBy(generateCMMBPCProperties)

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

task standaloneJar(type: Jar) {
    // Include all dependencies in jar:
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar // to include library classes themselves
    baseName = artifactId
    version = project.version
    classifier = 'standalone'
}

artifacts {
    archives sourcesJar
    //archives javadocJar
    archives standaloneJar
}

// Installs jars to local Maven repository:
install {
    doFirst {
        println project.name + ": package name: " + project.group
        println project.name + ": package version: " + project.version
        repositories.mavenInstaller {
            pom.groupId = project.group
            pom.artifactId = artifactId
            pom.version = project.version
            pom.packaging = 'jar'
        }
    }
}
