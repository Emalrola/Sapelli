/**
 * Sapelli data collection platform: http://sapelli.org
 *
 * Copyright 2012-2016 University College London - ExCiteS group
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
	id 'java'
	id 'application'
	id "com.github.johnrengelman.shadow" version "2.0.1"
	id 'com.github.ben-manes.versions' version '0.15.0'
	id 'edu.sc.seis.launch4j' version '2.3.0'
}

def artifactId = 'sapelli-collector-packager'
def packagerTitle = 'Sapelli Packager'
def packagerMainClass = 'uk.ac.ucl.excites.sapelli.packager.Packager'
def packagerVersion = '1.0.0-SNAPSHOT'

compileJava {
	options.encoding = 'UTF-8'
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
	// Sapelli Library:
	compile project(':Library')
	// Other dependencies:
	// Add Logging tools
	compile 'ch.qos.logback:logback-classic:1.2.3'
	compile 'org.slf4j:log4j-over-slf4j:1.7.25'
	// Add JetBrains Annotations
	compile 'org.jetbrains:annotations:15.0'
	// Add project lombok
	compile 'org.projectlombok:lombok:1.16.16'
	// Material Design for JavaFX
	compile 'com.jfoenix:jfoenix:1.5.0'
	// Font Awesome
	compile 'com.github.jiconfont:jiconfont-javafx:1.0.0'
	compile 'com.github.jiconfont:jiconfont-font_awesome:4.7.0.0'
}

// Define Logger
configurations.all {
	exclude group: "org.slf4j", module: "slf4j-log4j12"
	exclude group: "log4j", module: "log4j"
}

/**
 * Fat Jar configuration
 */
shadowJar {
	// Name the file sapelli-collector-packager.jar
	baseName = artifactId
	classifier = 'with-dependencies'
	version = packagerVersion
	mainClassName = packagerMainClass

	manifest {
		//noinspection GroovyAssignabilityCheck
		attributes 'Implementation-Title': packagerTitle,
		  'Implementation-Version': packagerVersion,
		  'Built-By': System.getProperty('user.name'),
		  'Built-JDK': System.getProperty('java.version'),
		  'Created-By': 'Gradle'
	}
}

/**
 * launch4j (Create an .exe) configuration
 */
launch4j {
	outfile = packagerTitle + ' v' + packagerVersion + '.exe'
	productName = packagerTitle
	mainClassName = packagerMainClass
	icon = "${project.buildDir}\\resources\\main\\icon\\SapelliPackager.ico"
	jar = "${project.buildDir}\\libs\\sapelli-collector-packager-${packagerVersion}-with-dependencies.jar"
}

/**
 * Very simple task that just prints some debug info for the launch4j createExe task, this is linked to the createExe task later with the depend on command
 */
task createExeInfo {

	description "Very simple task that just prints some debug info for the launch4j createExe task"
	group "Sapelli CollectorPackager"

	// Show debug info firstly
	doLast {
		println "----------"
		println "Collector Packager to .exe"
		println project.name + ": package name: " + project.group
		println project.name + ": package version: " + project.version
		println project.name + ": outfile: " + launch4j.outfile
		println project.name + ": icon: " + launch4j.icon
		println project.name + ": jar: " + launch4j.jar
		println "----------"
	}
}
// Configure createExeInfo: Run each time before the createExe
createExe.dependsOn createExeInfo

/**
 * Check if a version is snapshot and throw an exception if it is
 */
def checkSnapshot = {
	def snapshot = packagerVersion.toString().contains("SNAPSHOT")

	if (snapshot)
	{
		throw new GradleException("This is a SNAPSHOT version. Please change the version and try again.")
	}

	return !snapshot
}

/**
 * Task to zip the release, ready to be upload on GitHub
 */
task archiveRelease(type: Zip) {

	description "Prepare an archive for the Sapelli CollectorPackager"
	group "Sapelli CollectorPackager"

	// Check if the project has a proper version and is not a SNAPSHOT release
	onlyIf(checkSnapshot)

	// Define task dependencies
	dependsOn(clean)
	dependsOn(shadowJar)
	dependsOn(createExe)

	// Ensure order of dependancies
	shadowJar.mustRunAfter(clean)
	createExe.mustRunAfter(shadowJar)

	// Define variables
	def appNameVesion = packagerTitle + ' v' + packagerVersion
	def fromDirectory = "${project.buildDir}\\launch4j\\"

	// Gradle ZIP parameters
	archiveName = appNameVesion + '.zip'
	destinationDir = new File("${project.buildDir}")
	includeEmptyDirs = true
	from fromDirectory
	into appNameVesion // Add a directory in the zip with the name version of the packager
	include '*.exe' // Include only the executable

	// Show debug info firstly
	doFirst {
		println "----------"
		println "Collector Packager to archive"
		println project.name + ": archiveName: " + archiveName
		println project.name + ": fromDirectory: " + fromDirectory
		println project.name + ": destinationDir: " + destinationDir
		println "----------"
	}
}