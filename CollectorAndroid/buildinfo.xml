<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="Sapelli Data Collector - Build info generation" default="GenerateBuildInfo" xmlns:ac="antlib:net.sf.antcontrib">
	<!-- Author: mstevens -->

	<taskdef resource="net/sf/antcontrib/antlib.xml" uri="antlib:net.sf.antcontrib"/><!-- required for for/if/etc. -->	
    
    <target name="-settings">
        
        <!-- Change these if needed -->
        <property name="resourcename" value="buildinfo"/>
		
        <!-- Don't touch these: -->
		<property environment="env"/>
		<property name="home" location="."/>
		<property name="project-dir" location="${basedir}"/>
		<loadproperties srcFile="${project-dir}${file.separator}project.properties" />
		<xmlproperty file="${project-dir}${file.separator}AndroidManifest.xml" prefix="mani" collapseAttributes="true"/>
		<property name="appVersionName" value="${mani.manifest.android:versionName}"/>
		<property name="appVersionCode" value="${mani.manifest.android:versionCode}"/>
		<property name="package" value="${mani.manifest.package}"/>
		<!--<property name="gen-dir" location="${project-dir}${file.separator}gen"/>
		<property name="mvn-gen-dir" location="${project-dir}${file.separator}target${file.separator}generated-sources${file.separator}r"/>-->
		<!--<condition property="build-dir" value="${mvn-gen-dir}" else="${gen-dir}">
			<isset property="mvn-phase"/>
    </condition>-->
		<property name="assets-dir" location="${project-dir}${file.separator}assets"/>
		<property name="res-values-dir" location="${project-dir}${file.separator}res${file.separator}values"/>
		<!--<loadresource property="package-path">
			<propertyresource name="package"/>
			<filterchain>
				<tokenfilter>
					<replacestring from="." to="${file.separator}"/>
				</tokenfilter>
			</filterchain>
		</loadresource>-->
		<!--<property name="output-dir" location="${build-dir}${file.separator}${package-path}"/>-->
		<property name="output-dir" location="${res-values-dir}"/>
		<condition property="output-dir-not-there">
			<not>
				<available file="${output-dir}" type="dir"/>
			</not>
		</condition>
		<property name="file-path" location="${output-dir}${file.separator}${resourcename}.xml"/>
		<property name="demo-project-filename" value="demo.excites"/>
	</target>

    <target name="-git.branch" description="Store current git branch in ${repository-branch}">
	    <exec executable="git" outputproperty="git-branch" failifexecutionfails="false" errorproperty="">
	        <arg value="rev-parse"/>
	        <arg value="--abbrev-ref"/>
	        <arg value="HEAD"/>
	    </exec>
	    <condition property="repository-branch" value="${git-branch}" else="unknown">
	        <and>
	            <isset property="git-branch"/>
	            <length string="${git-branch}" trim="yes" length="0" when="greater"/>
	        </and>
	    </condition>
	    <echo>Active git branch: ${repository-branch}</echo>
	</target>
    
    <target name="-git.revision" description="Store git revision in ${repository-version}">
	    <exec executable="git" outputproperty="git-revision" failifexecutionfails="false" errorproperty="">
	        <arg value="log"/>
	        <arg value="--pretty=format:%h"/>
	        <arg value="-n"/>
	        <arg value="1"/>
	    </exec>
	    <condition property="repository-version" value="${git-revision}" else="unknown">
	        <and>
	            <isset property="git-revision"/>
	            <length string="${git-revision}" trim="yes" length="0" when="greater"/>
	        </and>
	    </condition>
	    <echo>Last git commit hash: ${repository-version}</echo>
	</target>
    
	<target name="-git.tag" description="Store git tag in ${repository-tag}">
	    <exec executable="git" outputproperty="git-tag" failifexecutionfails="false" errorproperty="">
	        <arg value="describe"/>
	        <arg value="--tags"/>
	        <arg value="HEAD"/>
	    </exec>
	    <condition property="repository-tag" value="${git-tag}" else="unknown">
	        <and>
	            <isset property="git-tag"/>
	            <length string="${git-tag}" trim="yes" length="0" when="greater"/>
	        </and>
	    </condition>
	    <echo>Last git commit tag: ${repository-tag}</echo>
	</target>

	<target name="-git.changes" description="Check if there are changes w.r.t. the last commit in the given ${repository-path}">
	    <echo>Checking for changes in: ${repository-path}</echo>
	    <ac:var name="git-changes" unset="true"/>
		<exec executable="git" resultproperty="git-changes" failifexecutionfails="false" errorproperty="">
	        <arg value="diff"/>
	        <arg value="--quiet"/>
	        <arg value="HEAD"/>
	    	<arg value='"${repository-path}"'/>
	    </exec>
		<ac:var name="repository-path-changes" unset="true"/>
		<condition property="repository-path-changes" value="true" else="false">
	        <and>
			<isset property="git-changes"/>
	        	<equals arg1="${git-changes}" arg2="1"/>
	        </and>
	    </condition>
	    <echo>Changes since last commit?: ${repository-path-changes}</echo>
	</target>
	
	<target name="-create-dir" if="output-dir-not-there">
		<echo>Making output directory...</echo>
		<mkdir dir="${output-dir}"/>
	</target>
	
	<target name="-git" depends="-git.branch,-git.revision,-git.tag">
		<ac:if>
			<ac:not>
				<equals arg1="${repository-version}" arg2="unknown"/>
			</ac:not>
			<ac:then>
		        <!-- first checks the project itself and then (if needed) loops over the android.library.reference.* properties which are loaded from project.properties -->
		        <script language="javascript">
		   			//Check project itself:
		   			project.setProperty("repository-path", ".");
		   			project.executeTarget("-git.changes");
		            //Check libraries (as long as we do not find changes):
					i = 1;
					while(project.getProperty("repository-path-changes") != "true")
					{
						libpath = project.getProperty("android.library.reference." + i++);
						if(libpath != null)
						{
							project.setProperty("repository-path", libpath);
							project.executeTarget("-git.changes");
						}
						else
							break;
					}
					project.setProperty("repository-changes", project.getProperty("repository-path-changes"));
				</script>
			</ac:then>
			<ac:else>
				<property name="repository-changes" value="false"/>
			</ac:else>
		</ac:if>
	</target>
	
	<target name="git-check" depends="-settings,-git">
	    <echo>Active git branch: ${repository-branch}</echo>
		<echo>Last git commit hash: ${repository-version}</echo>
		<echo>Last git commit tag: ${repository-tag}</echo>
		<echo>Changes since last commit?: ${repository-changes}</echo>
	</target>
	
	<target name="-demo">
		<ac:if>
			<isset property="demo"/>
			<then>
			    <!-- Copy project file into resources -->
			    <copy file="${demo}" tofile="${assets-dir}/${demo-project-filename}" overwrite="true"/>
			    <!-- Set demo-build flag -->
			    <property name="demo-build" value="true"/>
			</then>
			<else>
			    <property name="demo-build" value="false"/>
			</else>
		</ac:if>
	</target>
	
	<target name="GenerateBuildInfo" depends="-settings,-create-dir,-git,-demo">
		<tstamp>
			<format property="TIMESTAMP" pattern="yyyy-MM-dd'T'HH:mm:ssZ"/>
		</tstamp>
		<echo>Generating ${resourcename}.xml resource file...</echo>
		<echo>	User: ${user.name}</echo>
		<echo>	Build timestamp: ${TIMESTAMP}</echo>
		<echo>	App version (code): ${appVersionName} (${appVersionCode})</echo>
		<echo>  Active git branch: ${repository-branch}</echo>
		<echo>	Last git commit hash: ${repository-version}</echo>
		<echo>	Last git commit tag: ${repository-tag}</echo>
		<echo>	Changes since last commit?: ${repository-changes}</echo>
		<echo>	Demo build?: ${demo-build}</echo>
		<!-- Generate the class: -->
		<echo file="${file-path}">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!--
	Sapelli data collection platform: http://sapelli.org
	
	Copyright 2012-2014 University College London - ExCiteS group
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	    http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
 --&gt;
&lt;!-- Automatically generated file, do not edit! --&gt;
&lt;resources&gt;
	&lt;item name="username" type="${resourcename}"&gt;${user.name}&lt;/item&gt;
	&lt;item name="timestamp" type="${resourcename}"&gt;${TIMESTAMP}&lt;/item&gt;
	&lt;item name="branch" type="${resourcename}"&gt;${repository-branch}&lt;/item&gt;
	&lt;item name="lastCommitHash" type="${resourcename}"&gt;${repository-version}&lt;/item&gt;
	&lt;item name="lastCommitTag" type="${resourcename}"&gt;${repository-tag}&lt;/item&gt;
	&lt;item name="changesSinceLastCommit" type="${resourcename}"&gt;${repository-changes}&lt;/item&gt;
	&lt;item name="demoBuild" type="${resourcename}"&gt;${demo-build}&lt;/item&gt;
&lt;/resources&gt;
</echo>
		<echo>${resourcename} resource file generated (${file-path}).</echo>
	</target>
	
	<!-- doesn't seem to work, but can be achieved in the builder settings within Eclipse -->
	<target name="-refresh-eclipse" depends="-settings">
	<!-- 	<echo>Refreshing generated sources folder in Eclipse...</echo>
		<eclipse.refreshLocal resource="${gen-dir}" depth="infinite"/> -->
	</target>
	
	<target name="-clean-demo">
		<ac:if>
			<isset property="demo"/>
			<then>
			    <!-- Delete project file into resources -->
			    <delete file="${assets-dir}/${demo-project-filename}" failonerror="false"/>
			</then>
		</ac:if>
	</target>
	
</project>